"""
Represents binary data as Base64-encoded strings, using the standard alphabet.
"""
scalar Base64 @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc4648.html#section-4")

type BytesPayload {
  data: Base64!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type JSONPayload {
  data: JSON!
}

"""Valid Kafka Topic to subscribe to. Does not accept wildcards or RegEx"""
input KAFKATopicInput {
  topic: String!
}

"""MQTT message which published in the UNS platform"""
type MQTTMessage {
  """Fully qualified path of the namespace. i.e. the MQTT Topic"""
  topic: String!

  """
  the payload of the MQTT message
   -JSON for UNS 
   -bytes for sparkplugB
  """
  payload: StateStringJSONPayloadBytesPayload
}

"""Valid MQTT Topic to subscribe to. Accepts wild cards"""
input MQTTTopicInput {
  topic: String!
}

type Query {
  """"""
  resolveAllTopics: [UNSNode!]!

  """"""
  resolveSpecificTopics(topics: [String!]!): [UNSNode!]!
}

type StateString {
  data: String!
}

union StateStringJSONPayloadBytesPayload = StateString | JSONPayload | BytesPayload

type StreamingMessage {
  topic: String!
  payload: JSONPayload!
}

type Subscription {
  """ Subscribe to MQTT messages based on provided list of topics. MQTT wildcards are supported 
  """
  getMqttMessages(topics: [MQTTTopicInput!]!): MQTTMessage!

  """Subscribe to Kafka messages based on provided topics"""
  getKafkaMessages(topics: [KAFKATopicInput!]!): StreamingMessage!
}

type UNSNode {
  nodeName: String!
  nodeType: String!
  namespace: String!
  payload: JSONPayload!
  created: Union!
  lastUpdated: Union!
}

"""Int 64 field since GraphQL doesn't support int64, only int 32"""
scalar Union