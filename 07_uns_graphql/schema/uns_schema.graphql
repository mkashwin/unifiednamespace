"""
Represents binary data as Base64-encoded strings, using the standard alphabet.
"""
scalar Base64 @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc4648.html#section-4")

enum BinaryOperator {
  OR
  AND
  NOT
}

type BytesPayload {
  data: Base64!
}

"""Date with time (isoformat)"""
scalar DateTime

type HistoricalUNSEvent {
  publisher: String!
  timestamp: DateTime!
  topic: String!
  payload: JSONPayload!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf).
"""
scalar JSON @specifiedBy(url: "https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf")

type JSONPayload {
  data: JSON!
}

union JSONPayloadBytesPayload = JSONPayload | BytesPayload

"""Valid Kafka Topic to subscribe to. Does not accept wildcards or RegEx"""
input KAFKATopicInput {
  topic: String!
}

"""MQTT message which published in the UNS platform"""
type MQTTMessage {
  """Fully qualified path of the namespace. i.e. the MQTT Topic"""
  topic: String!

  """
  the payload of the MQTT message
   -JSON for UNS 
   -bytes for sparkplugB
  """
  payload: JSONPayloadBytesPayload
}

"""Valid MQTT Topic to subscribe to. Accepts wild cards"""
input MQTTTopicInput {
  topic: String!
}

"""Query the UNS for current or historic Nodes/Events """
type Query {
  """
  Get all historical published on the given array of topics and between the time slots.
  """
  getHistoricEventsInTimeRange(topics: [MQTTTopicInput!]!, fromDatetime: DateTime, toDatetime: DateTime): [HistoricalUNSEvent!]!

  """Get all historical events published by specified clients."""
  getHistoricEventsByPublishers(publishers: [String!]!, topics: [MQTTTopicInput!], fromDatetime: DateTime, toDatetime: DateTime): [HistoricalUNSEvent!]!

  """
  Get all historical events published which have specific attributes.Option binary_operator input allows chaining the list of property_keys. If NULL, property_keys will be ORed- OR: Either of the property_keys must exist in the same event.. If only one property_keys provided will be ignored- AND:  All property_keys must exist in same event. If only one property_keys provided will be ignored- NOT: None of the provided property_keys should exist in the same eventOther criteria - topics, from_datetime & to_datetime will always be ANDed to the query filter
  """
  getHistoricEventsByProperty(propertyKeys: [String!]!, binaryOperator: BinaryOperator, topics: [MQTTTopicInput!], fromDatetime: DateTime, toDatetime: DateTime): [HistoricalUNSEvent!]!

  """
  Get consolidation of nodes for given array of topics. MQTT wildcards are supported
  """
  getUnsNodes(topics: [MQTTTopicInput!]!): [UNSNode!]!

  "Get all UNSNodes published which have specific attribute name as 'propertyKeys'. \n Optionally Filter results with list of  topics. \nIf topics are provided then optional boolean value 'excludeTopics' attribute can be set to true .\nto exclude the nodes which match the topics.\n"
  getUnsNodesByProperty(propertyKeys: [String!]!, topics: [MQTTTopicInput!], excludeTopics: Boolean = false): [UNSNode!]!

  """Get all the SPBNode by the provided metric name"""
  getSpbNodesByMetric(metricNames: [String!]!): [SPBNode!]!
}

type SPBDataSet {
  numOfColumns: Union!
  columns: [String!]!
  types: [String!]!
  rows: [SPBDataSetRow!]!
}

type SPBDataSetRow {
  elements: [SPBDataSetValue!]!
}

type SPBDataSetValue {
  value: SPBPrimitive!
}

type SPBMetadata {
  isMultiPart: Boolean
  contentType: String
  size: Union
  seq: Union
  fileName: String
  fileType: String
  md5: String
  description: String
}

type SPBMetric {
  name: String!
  alias: Union
  timestamp: DateTime!
  datatype: String!
  isHistorical: Boolean
  isTransient: Boolean
  isNull: Boolean
  metadata: SPBMetadata
  properties: SPBPropertySet
  value: SPBPrimitiveBytesPayloadSPBDataSetSPBTemplate!
}

type SPBNode {
  topic: String!
  timestamp: DateTime!
  metrics: [SPBMetric!]!
  seq: Union!
  uuid: ID
  body: Base64
}

"""
Wrapper for primitive types in Sparkplug.: int, float, str, bool, list
                 Needed because GraphQL does not support str for unions.
                 Data is converted to its String representation for convenience.
                 Use the datatype to convert to actual type if needed 
"""
type SPBPrimitive {
  data: String!
}

union SPBPrimitiveBytesPayloadSPBDataSetSPBTemplate = SPBPrimitive | BytesPayload | SPBDataSet | SPBTemplate

union SPBPrimitiveSPBPropertySetSPBPropertySetList = SPBPrimitive | SPBPropertySet | SPBPropertySetList

type SPBPropertySet {
  keys: [String!]!
  values: [SPBPropertyValue!]!
}

type SPBPropertySetList {
  propertysets: [SPBPropertySet!]!
}

type SPBPropertyValue {
  isNull: Boolean
  datatype: String!
  value: SPBPrimitiveSPBPropertySetSPBPropertySetList!
}

type SPBTemplate {
  version: String
  metrics: [SPBMetric!]!
  parameters: [SPBTemplateParameter!]
  templateRef: String
  isDefinition: Boolean
}

type SPBTemplateParameter {
  name: String!
  datatype: String!
  value: SPBPrimitive!
}

type StreamingMessage {
  topic: String!
  payload: JSONPayload!
}

"""Subscribe to UNS Events or Streams"""
type Subscription {
  """ Subscribe to MQTT messages based on provided list of topics. MQTT wildcards are supported 
  """
  getMqttMessages(topics: [MQTTTopicInput!]!): MQTTMessage!

  """
  Subscribe to Kafka messages based on provided topics. Wildcards/Regex not supported
  """
  getKafkaMessages(topics: [KAFKATopicInput!]!): StreamingMessage!
}

type UNSNode {
  nodeName: String!
  nodeType: String!
  namespace: String!
  payload: JSONPayload!
  created: DateTime!
  lastUpdated: DateTime!
}

"""Int 64 field since GraphQL doesn't support int64, only int 32"""
scalar Union