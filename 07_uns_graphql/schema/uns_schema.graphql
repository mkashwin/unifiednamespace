"""
Represents binary data as Base64-encoded strings, using the standard alphabet.
"""
scalar Base64 @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc4648.html#section-4")

enum BinaryOperator {
  OR
  AND
  NOT
}

type BytesPayload {
  data: Base64!
}

"""Date with time (isoformat)"""
scalar DateTime

type HistoricalUNSEvent {
  publisher: String!
  timestamp: DateTime!
  topic: String!
  payload: JSONPayload!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type JSONPayload {
  data: JSON!
}

"""Valid Kafka Topic to subscribe to. Does not accept wildcards or RegEx"""
input KAFKATopicInput {
  topic: String!
}

"""MQTT message which published in the UNS platform"""
type MQTTMessage {
  """Fully qualified path of the namespace. i.e. the MQTT Topic"""
  topic: String!

  """
  the payload of the MQTT message
   -JSON for UNS 
   -bytes for sparkplugB
  """
  payload: StateStringJSONPayloadBytesPayload
}

"""Valid MQTT Topic to subscribe to. Accepts wild cards"""
input MQTTTopicInput {
  topic: String!
}

"""Query the UNS for current or historic Nodes/Events """
type Query {
  """
  Get all historical published on the given array of topics and between the time slots.
  """
  getHistoricEventsInTimeRange(topics: [MQTTTopicInput!]!, fromDatetime: DateTime, toDatetime: DateTime): [HistoricalUNSEvent!]!

  """Get all historical events published by specified clients."""
  getHistoricEventsByPublishers(publishers: [String!]!, topics: [MQTTTopicInput!], fromDatetime: DateTime, toDatetime: DateTime): [HistoricalUNSEvent!]!

  """
  Get all historical events published which have specific attributes.Option binary_operator input allows chaining the list of property_keys. If NULL, property_keys will be ORed- OR: Either of the property_keys must exist in the same event.. If only one property_keys provided will be ignored- AND:  All property_keys must exist in same event. If only one property_keys provided will be ignored- NOT: None of the provided property_keys should exist in the same eventOther criteria - topics, from_datetime & to_datetime will always be ANDed to the query filter
  """
  getHistoricEventsByProperty(propertyKeys: [String!]!, binaryOperator: BinaryOperator, topics: [MQTTTopicInput!], fromDatetime: DateTime, toDatetime: DateTime): [HistoricalUNSEvent!]!
}

"""Same as String. Needed because GraphQL does not support str for unions"""
type StateString {
  data: String!
}

union StateStringJSONPayloadBytesPayload = StateString | JSONPayload | BytesPayload

type StreamingMessage {
  topic: String!
  payload: JSONPayload!
}

"""Subscribe to UNS Events or Streams"""
type Subscription {
  """ Subscribe to MQTT messages based on provided list of topics. MQTT wildcards are supported 
  """
  getMqttMessages(topics: [MQTTTopicInput!]!): MQTTMessage!

  """
  Subscribe to Kafka messages based on provided topics. Wildcards/Regex not supported
  """
  getKafkaMessages(topics: [KAFKATopicInput!]!): StreamingMessage!
}