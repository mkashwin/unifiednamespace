[tool.poetry]
name = "uns_graphql"
version = "0.9.1"
description = "Provide GraphQL capabilities to the UNS across all data sources -MQTT, KAFKA, Historian & GraphDB"
license = "MIT"
authors = ["Ashwin Krishnan <mkashwin@gmail.com>"]
maintainers = [
    "Himanshu Dhami <himanshudhami@gmail.com>",
    "Johan Jeppson <logic4human@gmail.com>",
]
readme = "README.md"
# homepage = ""
repository = "https://github.com/mkashwin/unifiednamespace/tree/main/07_uns_graphql"
# documentation = ""
keywords = ["uns", "graphql", "mqtt", "graphDB", "historian", "kafka"]
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Intended Audience :: Manufacturing",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries :: UNS GraphQL",
  "Topic :: Industry 4.0 :: Unified Name Space :: UNS GraphQL Resolver"
]
packages = [{ include = "uns_graphql", from = "src" }]

[tool.poetry.dependencies]
python = "^3.12"
logger = "^1.4"
dynaconf = "^3.2.4"
strawberry-graphql = { version = "^0.247", extras = ["fastapi", "cli"] }
aiohttp = "^3.10"
uvicorn = { version = "^0.32", extras = ["standard"] }
aiomqtt = "^2.2.0"
confluent-kafka = "^2.6.0"
neo4j = "^5.26"
asyncpg = "^0.30"
psutil = "^6.0.0"

[tool.poetry.group.dev.dependencies]
uns-mqtt = { path = "../02_mqtt-cluster", develop = true }

[tool.poetry.group.test.dependencies]
strawberry-graphql = { version = "^0.247", extras = ["debug-server"] }
pytest = "^8.3.3"
pytest-xdist = { version="^3.6.1",extras =["psutil2"]}
pytest-asyncio = "^0.24.0"
pytest-timeout = "^2.3.1" 
pytest-cov = "^6.0.0"
safety = "^3.2.10"
ruff = "^0.7.3"
pytest-retry = "^1.6.3"

[tool.poetry.scripts]
uns_graphql_app = "uns_graphql.uns_graphql_app:main"
uns_graphql_healthcheck = "uns_graphql.health_check:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
norecursedirs = [".git", "build", "node_modules", "env*", "tmp*"]
testpaths = ["test"]
markers = ["integrationtest: mark a test as an integration test"]
addopts = "-n 6 --dist loadgroup --timeout=300 --retries 1  --retry-delay 1 --durations=10 --full-trace --timeout-method=thread"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
# Extend the `pyproject.toml` file in the parent directory...
extend = "../pyproject.toml"