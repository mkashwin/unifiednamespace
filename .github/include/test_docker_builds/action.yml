name: Compile Docker file and run Docker specific tests
description: Compile Docker file and run Docker specific tests
inputs:
  module:
    description: "the actual module for which the docker should be build and verified"
    required: True
  image_name:
    description: "name of the docker image"
    required: True
runs:
  using: "composite"
  steps:
    - name: Install dependencies in the
      shell: bash
      run: |
        module=${{ inputs.module }} 
        image_name=${{ inputs.image_name }} 
        SHA_TAG=${{ github.sha }}

        cd "${module}"
        echo "Validating Docker Entrypoint prior to build"

        # Extract the entrypoint from Dockerfile
        entry_point=$(cat ./Dockerfile | grep "^ENTRYPOINT")
        if [[ ! "${entry_point}" =~ ^ENTRYPOINT\ \[\"poetry\",\ \"run\",\ \".+\"\]$ ]]; then
            echo "Error: Entrypoint should be in the format [\"poetry\", \"run\", \"<command>\"]"
            
        fi

        echo "Entrypoint for Docker is: ${entry_point}"

        # Extract the command to be run
        command="$(echo "${entry_point}" | awk '{print $4}' | tr -d '",]')"

        # Validate based on command type
        if [[ "${command}" =~ ^[^:]+:[^:]+$ ]]; then  # Check for format <module>:<function>
            python_module=${command%:*}
            function=${command##*:}

            echo "Validating if ${command} points to a valid Python function"

            # Check for [tool.poetry.scripts] entry
            if ! grep -q "^\[tool.poetry.scripts\]" ./pyproject.toml; then
                echo "Error: [tool.poetry.scripts] section not found in pyproject.toml"
                
            fi

            if ! grep -q "^${python_module} =" ./pyproject.toml; then
                echo "Error: Script entry for ${python_module} not found in [tool.poetry.scripts] section of pyproject.toml"
                
            fi
        else
            echo "Validating if ${command} is a valid module command"

            # Check if command exists in the project
            if ! command -v "${command}" &> /dev/null; then
                echo "Error: Command ${command} not found in the project"
              
            fi
        fi

        echo "Validation successful!"

        echo "Creating Docker: ${image_name}:${SHA_TAG}"
        docker build -t "${image_name}:${SHA_TAG}" --build-arg GIT_HASH=${SHA_TAG::7} -f ./Dockerfile ..

        # Run the Docker tests
        echo "Running tests for Docker image: ${image_name}:${SHA_TAG}"
        docker run --entrypoint "sh" -e python_module="$python_module" -e function="$function" "${image_name}:${SHA_TAG}" -c '
          if [ ! -d "/02_mqtt-cluster" ]; then
            echo "Error: Folder /02_mqtt-cluster not found in Docker image"
            exit 1
          else
            echo "Success:  Folder /02_mqtt-cluster is present"
          fi

          if [ ! "$(ls -AR /app/src | grep -E ".py$" | wc -l)" -gt "0" ]; then
            echo "Error: No .py files found in folder /app/src"
            exit 1
          else
            echo "Success:  Python Files are present"
          fi

          if [ ! -f "/app/pyproject.toml" ]; then
            echo "Error: pyproject.toml file not found in folder /app"
            exit 1
          else
            echo "Success:  pyproject.toml file found"
          fi

          if [ -d "/app/test" ]; then
            echo "Error: test folder not found in folder /app"
            exit 1
          else
            echo "Success:  test folder was not copied to the Docker"
          fi
          
          poetry run python -m compileall -q /app || (echo "Error: compileall failed" && exit 1)

          entry_valid=$(poetry run python -c "import ${python_module} as module;print( '\''${function}'\''  in dir(module))")
          if [ ! "$entry_valid" == "True" ];then
            echo "Error: Invalid main entry ${python_module}:${function}"
            exit 1
          fi
          echo "Docker image tests passed successfully"
        '
