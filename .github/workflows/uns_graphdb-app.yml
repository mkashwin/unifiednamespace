# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: UNS Graph DB MQTT Client

on:
  push:
    branches:
      - "**"
    paths:
      - "02_mqtt-cluster/**/*.py"
      - "02_mqtt-cluster/pyproject.toml"
      - "02_mqtt-cluster/poetry.lock"
      - "03_uns_graphdb/**/*.py"
      - "03_uns_graphdb/pyproject.toml"
      - "03_uns_graphdb/poetry.lock"
      - "03_uns_graphdb/Dockerfile"
      - ".github/workflows/uns_graphdb-app.yml"
  pull_request:
    branches:
      - "**"
    paths:
      - "02_mqtt-cluster/**/*.py"
      - "02_mqtt-cluster/pyproject.toml"
      - "02_mqtt-cluster/poetry.lock"
      - "03_uns_graphdb/**/*.py"
      - "03_uns_graphdb/pyproject.toml"
      - "03_uns_graphdb/poetry.lock"
      - "03_uns_graphdb/Dockerfile"
      - ".github/workflows/uns_graphdb-app.yml"
permissions:
  contents: read

jobs:
  build_code:
    runs-on: ubuntu-latest
    env:
      UNS_mqtt.host: "localhost"
      UNS_mqtt.port: 1883
      UNS_graphdb.url: "bolt://localhost:7687"
      UNS_graphdb.username: "neo4j"
      UNS_graphdb.password: $(openssl rand -base64 32 | tr -dc '[:alnum:]')
    services:
      uns_mqtt:
        image: emqx/emqx:latest
        ports:
          - "1883:1883"
          - "8083:8083"
      uns_graphdb:
        image: neo4j:latest
        ports:
          - "7474:7474"
          - "7687:7687"
        env:
          NEO4J_AUTH: neo4j/${{ env.UNS_graphdb.password }}
          apoc.export.file.enabled: true
          apoc.import.file.enabled: true
          apoc.import.file.use_neo4j_config: true
          NEO4J_PLUGINS: '["apoc"]'
        options: >-
          --health-cmd "cypher-shell 'match (n) return count(n)'"
          --health-timeout 10s
          --health-retries 20
          --health-interval 10s
          --health-start-period 30

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          cd ./03_uns_graphdb
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Lint with flake8
        run: |
          # change to current directory of module
          cd ./03_uns_graphdb
          # stop the build if there are Python syntax errors or undefined names
          poetry run flake8 ./src ./test --count --select=E9,F63,F7,F82 --show-source --statistics 
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          poetry run flake8 ./src ./test --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test for security vulnerabilities
        run: |
          # change to current directory of module
          cd ./03_uns_graphdb
          poetry run safety check

      - name: Test with pytest
        run: |
          cd ./03_uns_graphdb

          poetry run pytest ./test

  build_docker_image:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          cd ./03_uns_graphdb
          docker build -t "uns/graphdb:${{ github.sha }}" -f ./Dockerfile ..
